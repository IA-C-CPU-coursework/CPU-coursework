working on testbench and testcases
11-27:
writing a simple tb module:
the testbench will displat the value stored in the register_v0
the outputs can be captured into a txt file.
current format is register_v0: xxx (value). 
--------------------------
creating the test folder.
different testcases should be included in assembly, with format .asm.txt
(C++) assembler convert this assembly into hex stored in binary

notes about instruction:
Data operations:
  Alrithmetic 
  Logical

Data transfer:
  Load
  store

Sequencing:
  Branch(conditional)
  Jump

1. ADDIU   |  Add immediate unsigned (no overflow)
addiu,$v0,$zero,0
addiu,$v0,$zero,12
addiu,$v0,$zero,767

1.1 ADDIU   |  Add immediate unsigned (no overflow)
addiu,$v0,$zero,0
addiu,$v0,$zero,45
addiu,$v0,$zero,890

2. SLL     |  Shift left logical                         
addiu,$t0,$zero,1234
sll,$v0,$t0,1
addiu,$v0,$v0,0
sll,$v0,$t0,3
addiu,$v0,$v0,0

2.2  SLL     |  Shift left logical 
addiu,$t0,$zero,987
sll,$v0,$t0,6
addiu,$v0,$v0,0
sll,$v0,$t0,7
addiu,$v0,$v0,0

3. SW      |  Store word 
addiu,$t3,$zero,24184
sll,$t1,$t3,7
sll,$t2,$t1,10
addiu,$sp,$t2,1024
addiu,$t0,$zero,123
sw,$t0,0($sp)
addiu,$t0,$zero,9014
sw,$t0,4($sp)
addiu,$t0,$zero,4565
sw,$t0,8($sp)
addiu,$v0,$t1,0

3.1 SW      |  Store word 
addiu,$t3,$zero,24184
sll,$t1,$t3,7
sll,$t2,$t1,10
addiu,$sp,$t2,1024
addu,$v0,$zero,$t0
addiu,$t0,$zero,8893
sw,$t0,0($sp)
addiu,$t0,$zero,5644
sw,$t0,4($sp)
addiu,$t0,$zero,2142
sw,$t0,8($sp)
addiu,$v0,$t1,0



4. LW      |  Load word 
addiu,$t3,$zero,24184
sll,$t1,$t3,7
sll,$t2,$t1,10
addiu,$sp,$t2,1024
addiu,$t0,$zero,8893
sw,$t0,0($sp)
lw,$t1,0($sp)
sw,%t1,4($sp)
addiu,$t0,$zero,564
sw,$t0,8($sp)
lw,$t1,8($sp)
sw,$t1,12($sp)
addiu,$v0,$t1,0


5. ADDU | add unsigned number
addiu,$t3,$zero,24184
sll,$t1,$t3,7
sll,$t2,$t1,10
addiu,$sp,$t2,1024
addiu,$s0,$zero,1234
addiu,$s1,$zero,2432
addu,$t0,$s0,$s1
sw,$t0,0($sp)
addiu,$s0,$zero,543
addiu,$s1,$zero,6464
addu,$t0,$s0,$s1
sw,$t0,4($sp)
addiu,$v0,$t0,0


6. LUI     |  Load upper immediate
addiu,$t3,$zero,24184
sll,$t1,$t3,7
sll,$t2,$t1,10
addiu,$t5,$t2,1024
lui,$t1,3535
sw,$t1,0($sp)
lui,$t2,3680
sw,$t2,4($sp)
lui,$t3,1099
sw,$t3,8($sp)
lui,$t4,8412
sw,$t4,12($sp)
lui,$t5,1680
sw,$t5,16($sp)
lui,$t6,1099
addiu,$v0,$t6,0


7. LB      |  Load byte
addiu,$t3,$zero,24184
sll,$t1,$t3,7
sll,$t2,$t1,10
addiu,$sp,$t2,1024
lb,$t0,0($sp)
addu,$v0,$zero,$t0
lb,$t1,4($sp)
addu,$v0,$zero,$t1
lb,$t2,8($sp)
addu,$v0,$zero,$t2
lb,$t3,12($sp)
addu,$v0,$zero,$t3
lb,$t4,16($sp)
addu,$v0,$zero,$t4


FFFFE120
03CfC020
F0105010
0120A182
B023B940


8. LBU     |  Load byte unsigned 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lbu,$t0,0($sp)
addu,$v0,$zero,$t0
lbu,$t1,4($sp)
addu,$v0,$zero,$t1
lbu,$t2,8($sp)
addu,$v0,$zero,$t2
lbu,$t3,12($sp)
addu,$v0,$zero,$t3
lbu,$t4,16($sp)
addu,$v0,$zero,$t4


FFFFE120
03CfC020
F0105010
0120A182
B023B940

9. LH      |  Load half-word 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lh,$t0,0($sp)
addu,$v0,$zero,$t0
lh,$t1,4($sp)
addu,$v0,$zero,$t1
lh,$t2,8($sp)
addu,$v0,$zero,$t2
lh,$t3,12($sp)
addu,$v0,$zero,$t3
lh,$t4,16($sp)
addu,$v0,$zero,$t4

0020E120
00CfC020
00105010
0120A182
B023B940

10. LHU     .|  Load half-word unsigned  
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400 
lhu,$t0,0($sp)
addu,$v0,$zero,$t0
lhu,$t1,4($sp)
addu,$v0,$zero,$t1
lhu,$t2,8($sp)
addu,$v0,$zero,$t2
lhu,$t3,12($sp)
addu,$v0,$zero,$t3
lhu,$t4,16($sp)
addu,$v0,$zero,$t4

0020E120
00CfC020
00105010
0120A182
B023B940

11.1  LWL     .|  Load word left 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lwl,$t0,0($sp)
addu,$v0,$zero,$t0
lwl,$t1,4($sp)
addu,$v0,$zero,$t1
lwl,$t2,8($sp)
addu,$v0,$zero,$t2

0020E120
00CfC020
00105010

11.2 LWL     .|  Load word left 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t3,1099
sw,$t3,0($sp)
lwl,$t4,0($sp)
addu,$v0,$zero,$t4
lui,$t4,8412
sw,$t4,4($sp)
lwl,$t4,4($sp)
addu,$v0,$zero,$t4
lui,$t5,1680
sw,$t5,8($sp)
lwl,$t5,8($sp)
addu,$v0,$zero,$t5


12.1---LWR     |  Load word right 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lwr,$t0,0($sp)
addu,$v0,$zero,$t0
lwr,$t1,4($sp)
addu,$v0,$zero,$t1
lwr,$t2,8($sp)
addu,$v0,$zero,$t2

0020E120
00CfC020
00105010

12.2----LWR     |  Load word right
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t3,1099
sw,$t3,0($sp)
lwr,$t4,0($sp)
addu,$v0,$zero,$t4
lui,$t4,8412
sw,$t4,4($sp)
lwr,$t4,4($sp)
addu,$v0,$zero,$t4
lui,$t5,1680
sw,$t5,8($sp)
lwr,$t5,8($sp)
addu,$v0,$zero,$t5

(..... )
13.MTHI    |  Move to HI 

14.MTLO    |  Move to LO

15.SB      |  Store byte 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t3,1099
sb,$t3,0($sp)
lb,$t4,0($sp)
addu,$v0,$zero,$t4
lui,$t4,8412
sb,$t4,4($sp)
lb,$t4,4($sp)
addu,$v0,$zero,$t4
lui,$t5,1680
sb,$t5,8($sp)
lb,$t5,8($sp)
addu,$v0,$zero,$t5 

16.SH      |  Store half-word 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t3,1099
sh,$t3,0($sp)
lh,$t4,0($sp)
addu,$v0,$zero,$t4
lui,$t4,8412
sh,$t4,4($sp)
lh,$t4,4($sp)
addu,$v0,$zero,$t4
lui,$t5,1680
sh,$t5,8($sp)
lh,$t5,8($sp)
addu,$v0,$zero,$t5

17.SLLV    |  Shift left logical variable 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
lui,$t1,2,
sllv,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,3456
lui,$t1,4,
sllv,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,A210
lui,$t1,7,
sllv,$t2,$t0,$t1
addu,$v0,$zero,$t2

18. OR      .|  Bitwise or   
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
lui,$t1,1022
or,$t3,$t0,$t1
addu,$v0,$zero,$t3
lui,$t0,3456
lui,$t1,982C
or,$t3,$t0,$t1
addu,$v0,$zero,$t3
lui,$t0,3827
lui,$t1,1024
or,$t3,$t0,$t1
addu,$v0,$zero,$t3

19. ORI     |  Bitwise or immediate 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
ori,$t3,$t0,1022
addu,$v0,$zero,$t3
lui,$t0,3456
ori,$t3,$t0,982C
addu,$v0,$zero,$t3
lui,$t0,3827
ori,$t3,$t0,1024
addu,$v0,$zero,$t3

20. XOR     |  Bitwise exclusive or 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
lui,$t1,1022
xor,$t3,$t0,$t1
addu,$v0,$zero,$t3
lui,$t0,3456
lui,$t1,982C
xor,$t3,$t0,$t1
addu,$v0,$zero,$t3
lui,$t0,3827
lui,$t1,1024
xor,$t3,$t0,$t1
addu,$v0,$zero,$t3

21. XORI    |  Bitwise exclusive or immediate 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
xori,$t3,$t0,1022
addu,$v0,$zero,$t3
lui,$t0,3456
xori,$t3,$t0,982C
addu,$v0,$zero,$t3
lui,$t0,3827
xori,$t3,$t0,1024
addu,$v0,$zero,$t3

22.AND     |  Bitwise and  
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
lui,$t1,1022
and,$t3,$t0,$t1
addu,$v0,$zero,$t3
lui,$t0,3456
lui,$t1,982C
and,$t3,$t0,$t1
addu,$v0,$zero,$t3
lui,$t0,3827
lui,$t1,1024
add,$t3,$t0,$t1
addu,$v0,$zero,$t3

23. ANDI    |  Bitwise and immediate 
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lui,$t0,2021
andi,$t3,$t0,1022
addu,$v0,$zero,$t3
lui,$t0,3456
andi,$t3,$t0,982C
addu,$v0,$zero,$t3
lui,$t0,3827
andi,$t3,$t0,1024
addu,$v0,$zero,$t3

24. SRA     |  Shift right arithmetic 
lui,$t0,A021
sra,$t1,$t0,1
addu,$v0,$zero,$t1
lui,$t0,32A1
sra,$t1,$t0,5
addu,$v0,$zero,$t1
lui,$t0,1C21
sra,$t1,$t0,7
addu,$v0,$zero,$t1
lui,$t0,2021
sra,$t1,$t0,10
addu,$v0,$zero,$t1

25.SRAV    |  Shift right arithmetic 
lui,$t0,A021
lui,$t1,2
sra,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,1C21
lui,$t1,4
sra,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,1098
lui,$t1,8
sra,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,F001
lui,$t1,10
sra,$t2,$t0,$t1
addu,$v0,$zero,$t2

26. SRL     |  Shift right logical
lui,$t0,A021
srl,$t1,$t0,1
addu,$v0,$zero,$t1
lui,$t0,32A1
srl,$t1,$t0,5
addu,$v0,$zero,$t1
lui,$t0,1C21
srl,$t1,$t0,7
addu,$v0,$zero,$t1
lui,$t0,2021
srl,$t1,$t0,10
addu,$v0,$zero,$t1

27.SRLV    |  Shift right logical variable 
lui,$t0,A021
lui,$t1,2
srlv,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,1C21
lui,$t1,4
srlv,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,1098
lui,$t1,8
srlv,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,F001
lui,$t1,10
srlv,$t2,$t0,$t1
addu,$v0,$zero,$t2

28 SUBU    |  Subtract unsigned
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lw,$t0,0($sp)
lw,$t1,4($sp)
lw,$t2,8($sp)
lw,$t3,12($sp)
lw,$t4,16($sp)
subu,$t5,$t0,$t1
addu,$v0,$zero,$t5
subu,$t5,$t0,$t2
addu,$v0,$zero,$t5
subu,$t5,$t0,$t3
addu,$v0,$zero,$t5
subu,$t5,$t0,$t4
addu,$v0,$zero,$t5


FCBFE120
03CfC020
10105010
0120A182
5023B940

29. J       |  Jump   
lui,$t0,1023
addu,$v0,$zero,$t0
j labela
lui,$t0,12C3
addu,$v0,$zero,$t0
labela:lui,$t0,B023
addu,$v0,$zero,$t0
j labelb
labelb:lui,$t0,6023
addu,$v0,$zero,$t0

30. JR      .|  Jump register 
lui,$t0,1023
addu,$v0,$zero,$t0
addiu,$t1,$zero,7
addiu,$v0,$zero,7
jr,$t1
addiu,$v0,$zero,70
addiu,$v0,$zero,3A
addiu,$v0,$zero,9B

30.2 JR      .|  Jump register
lui,$t0,34A
addu,$v0,$zero,$t0
addiu,$t1,$zero,7
jr,$t1
addiu,$v0,$zero,70
addiu,$v0,$zero,3A
addiu,$v0,$zero,9B
addiu,$v0,$zero,A012
addiu,$v0,$zero,1255

31 JAL     |  Jump and link   
lui,$t0,34A
addu,$v0,$zero,$t0
jal,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
addiu,$v0,$zero,12
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addu,$v0,$zero,$ra
addiu,$v0,$zero,1255

32 JALR    |  Jump and link register 
lui,$t0,34A
addu,$v0,$zero,$t0
addiu,$t1,$zero,7
jalr,$ra,$t1
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
addiu,$v0,$zero,12
lui,$t0,B023
addu,$v0,$zero,$t1
addu,$v0,$zero,$ra
addiu,$v0,$zero,1255

33 BEQ     |  Branch on equal  
addiu,$t0,$zero,1201
addiu,$t1,$zero,1201
beq,$t0,$t1,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$v0,$zero,A031

33.1 BEQ     |  Branch on equal  
addiu,$t0,$zero,A030
addiu,$t1,$zero,A031
beq,$t0,$t1,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

34. BGEZ    .|  Branch on greater than or equal to zero   
（using subu）
addiu,$t0,$zero,A030
addiu,$t1,$zero,A031
subu,$t2,$t0,$t1
bgez,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

34.1 BGEZ    .|  Branch on greater than or equal to zero 
(using stored negative value)
addiu,$t0,$zero,BCF0
sll,$t1,$t0,10
addiu,$sp,$t1,400
lw,$t0,0($sp)
lw,$t2,4($sp)
bgze,$t0,t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
lw,$t0,4($sp)
lw,$t2,8($sp)
bgze,$t0,t2,labelb
addiu,$v0,$zero,A102
addiu,$v0,$zero,1300
labelb:lui,$t0,5678
addu,$v0,$zero,$t0

FCBFE120
03CfC020
03CfC020

35 BGEZAL  |  Branch on non-negative (>=0) and link  
addiu,$t0,$zero,A030
addiu,$t1,$zero,A031
subu,$t2,$t1,$t0
bgezal,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addu,$v0,$zero,$ra

35.1 BGEZAL  |  Branch on non-negative (>=0) and link 
addiu,$t0,$zero,A030
addiu,$t1,$zero,1022
subu,$t2,$t1,$t0
bgezal,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785
addu,$v0,$zero,$ra

36.BGTZ    |  Branch on greater than zero   
addiu,$t0,$zero,A030
addiu,$t1,$zero,A030
subu,$t2,$t1,$t0
bgtz,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

36.1 BGTZ    |  Branch on greater than zero   
addiu,$t0,$zero,A030
addiu,$t1,$zero,A037
subu,$t2,$t1,$t0
bgtz,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

37. BLEZ    .|  Branch on less than or equal to zero 
addiu,$t0,$zero,A030
addiu,$t1,$zero,A037
subu,$t2,$t0,$t1
blez,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

37.1 BLEZ    .|  Branch on less than or equal to zero 
addiu,$t0,$zero,A047
addiu,$t1,$zero,A037
subu,$t2,$t0,$t1
blez,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

38. BLTZ   . |  Branch on less than zero  
addiu,$t0,$zero,A030
addiu,$t1,$zero,A030
subu,$t2,$t0,$t1
bltz,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

38.1 BLTZ   . |  Branch on less than zero  
addiu,$t0,$zero,A01B
addiu,$t1,$zero,A030
subu,$t2,$t0,$t1
bltz,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785


39. BLTZAL  |  Branch on less than zero and link 
addiu,$t0,$zero,A030
addiu,$t1,$zero,1022
subu,$t2,$t1,$t0
bltzal,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785
addu,$v0,$zero,$ra

39.1 BLTZAL  |  Branch on less than zero and link 
addiu,$t0,$zero,A030
addiu,$t1,$zero,A030
subu,$t2,$t1,$t0
bgezal,$t2,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addu,$v0,$zero,$ra

40 BNE     |  Branch on not equal  
addiu,$t0,$zero,1201
addiu,$t1,$zero,1201
bne,$t0,$t1,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$v0,$zero,A031

40.1 BNE    |  Branch on not equal  
addiu,$t0,$zero,A030
addiu,$t1,$zero,A031
bne,$t0,$t1,labela
addiu,$v0,$zero,1202
addiu,$v0,$zero,EF02
labela:lui,$t0,B023
addu,$v0,$zero,$t0
addiu,$t1,$zero,1785

41. SLT     |  Set on less than (signed)
addiu,$t0,$zero,A030
addiu,$t1,$zero,A031
slt,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,120C
lui,$t1,120C
slt,$t2,$t0,$t1
addu,$v0,$zero,$t2

41.1 SLT     |  Set on less than (signed)
addiu,$t0,$zero,A032
addiu,$t1,$zero,A031
slt,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,1002
lui,$t1,7819
slt,$t2,$t0,$t1
addu,$v0,$zero,$t2

42. SLTI    |  Set on less than immediate (signed) 
addiu,$t0,$zero,A030
liu,$t1,A031
slti,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,120C
lui,$t1,120C
slti,$t2,$t0,$t1
addu,$v0,$zero,$t2

42.1 SLTI    |  Set on less than immediate (signed) 
addiu,$t0,$zero,B030
liu,$t1,A031
slti,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,D013
lui,$t1,D013
slti,$t2,$t0,$t1
addu,$v0,$zero,$t2

43. SLTIU   . |  Set on less than immediate unsigned 
addiu,$t0,$zero,A030
liu,$t1,A031
sltiu,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,120C
lui,$t1,120C
sltiu,$t2,$t0,$t1
addu,$v0,$zero,$t2

43.1 SLTIU   . |  Set on less than immediate unsigned 
addiu,$t0,$zero,B030
liu,$t1,A031
sltiu,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,D013
lui,$t1,D013
sltiu,$t2,$t0,$t1
addu,$v0,$zero,$t2

44.SLTU    |  Set on less than unsigned 
addiu,$t0,$zero,A030
addiu,$t1,$zero,A031
sltu,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,120C
lui,$t1,120C
sltu,$t2,$t0,$t1
addu,$v0,$zero,$t2

44.1 SLTU    |  Set on less than unsigned 
addiu,$t0,$zero,A032
addiu,$t1,$zero,A031
sltu,$t2,$t0,$t1
addu,$v0,$zero,$t2
lui,$t0,1002
lui,$t1,7819
sltu,$t2,$t0,$t1
addu,$v0,$zero,$t2

